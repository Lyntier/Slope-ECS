// Basics

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // For publishing to Maven Central, we'll probably want these.
    id 'maven-publish'
    id 'signing'
}

group('io.github.lucasstarsz')
version('0.0.5')

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'
}

// Build

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'slope-ecs',
                'Implementation-Version': project.version,
                'Module-Name': 'Slope.ECS'
        )
    }
}

javadoc {
    source(sourceSets.main.allJava)
    failOnError(false)
    options.stylesheetFile(new File(projectDir, "src/main/javadoc/slope-custom.css"))
}

artifacts {
    archives javadocJar, sourcesJar
}

/* Java modules need this in order for the module path to be inferred based on module-info.java
 * files. */
plugins.withType(JavaPlugin).configureEach {
    java {
        modularity.inferModulePath = true
    }
}

// Testing
import org.gradle.api.internal.tasks.testing.results.DefaultTestResult

tasks.withType(Test) {
    testLogging {

        def totalTestTime = 0

        afterTest { desc, DefaultTestResult result ->
            totalTestTime += result.endTime - result.startTime
        }

        afterSuite { desc, DefaultTestResult result ->
            if (!desc.parent) { // will match the outermost suite
                def passFailSkip = "$result.successfulTestCount passed, $result.failedTestCount failed, $result.skippedTestCount skipped"
                def output = "Test Suite Results: $result.resultType ($result.testCount tests, $passFailSkip) in $totalTestTime ms."
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')

                if (("${result.resultType}" != "SUCCESS")) {
                    System.exit(0)
                }
            }
        }
    }
}

// Publishing

def shouldPublish = System.getenv('ossrhUsername') != null && System.getenv('ossrhPassword') != null
publish.onlyIf { shouldPublish }

if (shouldPublish) {
    publishing {
        publications {
            slopePublish(MavenPublication) {
                groupId = project.group
                artifactId = 'slope-ecs'
                version = project.version

                pom {
                    name = 'Slope ECS'
                    description = 'A pre-allocative, Java-based Entity Component System.'
                    url = 'https://github.com/lucasstarsz/Slope-ECS'

                    scm {
                        connection = 'scm:git:https://github.com/lucasstarsz/Slope-ECS.git'
                        developerConnection = 'scm:git:https://github.com/lucasstarsz/Slope-ECS.git'
                        url = 'https://github.com/lucasstarsz/Slope-ECS.git'
                    }

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/lucasstarsz/Slope-ECS/blob/main/LICENSE.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'andrewd'
                            name = 'Andrew Dey'
                            email = 'andrewrcdey@gmail.com'
                        }
                    }
                }

                from components.java
            }
        }

        repositories {
            maven {
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username = System.getenv('ossrhUsername')
                    password = System.getenv('ossrhPassword')
                }
            }
        }
    }

    signing {
        sign publishing.publications.slopePublish
    }
}
